/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-engines",
factory: function (require) {
var plugin=(()=>{var P=Object.create,f=Object.defineProperty;var N=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,Y=Object.prototype.hasOwnProperty;var T=n=>f(n,"__esModule",{value:!0});var s=n=>{if(typeof require!="undefined")return require(n);throw new Error('Dynamic require of "'+n+'" is not supported')};var V=(n,e)=>{for(var r in e)f(n,r,{get:e[r],enumerable:!0})},$=(n,e,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of j(e))!Y.call(n,t)&&t!=="default"&&f(n,t,{get:()=>e[t],enumerable:!(r=N(e,t))||r.enumerable});return n},c=n=>$(T(f(n!=null?P(b(n)):{},"default",n&&n.__esModule&&"default"in n?{get:()=>n.default,enumerable:!0}:{value:n,enumerable:!0})),n);var U={};V(U,{default:()=>q});var i=c(s("@yarnpkg/core")),g;(function(r){r.Yarn="Yarn",r.Console="Console"})(g||(g={}));var h=class{constructor(e){this.throwWrongEngineError=(e,r,t)=>{let o=this.formatErrorMessage(e,r,t);this.throwError(o)};this.throwError=e=>{switch(this.errorReporter){case g.Yarn:this.reportYarnError(e);break;case g.Console:default:this.reportConsoleError(e);break}};this.reportYarnError=e=>{throw new i.ReportError(i.MessageName.UNNAMED,e)};this.reportConsoleError=e=>{console.error(e),process.exit(1)};this.formatErrorMessage=(e,r,t)=>{let{configuration:o}=this.project,a=i.formatUtils.applyStyle(o,i.formatUtils.pretty(o,this.engine,"green"),2),d=i.formatUtils.pretty(o,e,"cyan"),R=i.formatUtils.pretty(o,r,"cyan"),E=`The current ${a} version ${d} does not satisfy the required version ${R}.`;return t&&(E+=` ${i.formatUtils.pretty(o,t,"yellow")}`),i.formatUtils.pretty(o,E,"red")};this.project=e.project,this.errorReporter=e.errorReporter}};var p=c(s("@yarnpkg/core")),k=c(s("@yarnpkg/fslib")),l=c(s("fs")),x=c(s("path")),m=c(s("semver"));var v=class extends h{constructor(){super(...arguments);this.resolveNvmRequiredVersion=()=>{let{configuration:e,cwd:r}=this.project,t=(0,x.resolve)(k.npath.fromPortablePath(r),".nvmrc"),o=p.formatUtils.applyStyle(e,p.formatUtils.pretty(e,this.engine,"green"),2);if(!(0,l.existsSync)(t)){this.throwError(p.formatUtils.pretty(e,`Unable to verify the ${o} version. The .nvmrc file does not exist.`,"red"));return}let a=(0,l.readFileSync)(t,"utf-8").trim();if((0,m.validRange)(a))return a;let d=p.formatUtils.pretty(e,".nvmrc","yellow");this.throwError(p.formatUtils.pretty(e,`Unable to verify the ${o} version. The ${d} file contains an invalid semver range.`,"red"))}}get engine(){return"Node"}verifyEngine(e){let r=e.node;r!=null&&(r===".nvmrc"&&(r=this.resolveNvmRequiredVersion()),(0,m.satisfies)(process.version,r,{includePrerelease:!0})||this.throwWrongEngineError(process.version.replace(/^v/i,""),r.replace(/^v/i,""),`Run \`${p.formatUtils.pretty(this.project.configuration,"nvm use","bold")}\` to use the correct Node version.`))}};var C=c(s("semver")),u=c(s("@yarnpkg/core"));var y=class extends h{get engine(){return"Yarn"}verifyEngine(e){let r=e.yarn;r!=null&&((0,C.satisfies)(u.YarnVersion,r,{includePrerelease:!0})||this.throwWrongEngineError(u.YarnVersion,r))}};var w=n=>e=>{if(process.env.PLUGIN_YARN_ENGINES_DISABLE!=null)return;let{engines:r={}}=e.getWorkspaceByCwd(e.cwd).manifest.raw,t={project:e,errorReporter:n};[new v(t),new y(t)].forEach(a=>a.verifyEngine(r))},S={hooks:{validateProject:w(g.Yarn),setupScriptEnvironment:w(g.Console)}},q=S;return U;})();
return plugin;
}
};
